ANOVATable_Koerperlaenge_SSw <-  ANOVATable %>% slice(21:30) %>% group_by(faktorstufen) %>% mutate(mean_flugdauer = mean(Flugdauer)) %>% mutate(differenz_mean = Flugdauer - mean_flugdauer, differenz_mean_quadrat = differenz_mean**2)
SSw_Koerperlaenge <- sum(ANOVATable_Koerperlaenge_SSw$differenz_mean_quadrat)
#SSB
ANOVATable_Koerperlaenge_SSb <- ANOVATable_Koerperlaenge_SSw %>% summarise(mean_flugdauer = mean(Flugdauer), sd_flugdauer =  (var(Flugdauer)*((n()-1)/n())**(1/2)))
mean_mean_flugdauer_Koerperlaenge <- mean(ANOVATable_Koerperlaenge_SSb$mean_flugdauer)
ANOVATable_Koerperlaenge_SSb <- ANOVATable_Koerperlaenge_SSb %>% mutate(mean_mean_flugdauer = mean_mean_flugdauer_Koerperlaenge, differenz_mean_to_meanmean = mean_flugdauer - mean_mean_flugdauer, differenz_mean_to_meanmean_quadrat = differenz_mean_to_meanmean**2)
SSb_Koerperlaenge <- Anzahl_Test*sum(ANOVATable_Koerperlaenge_SSb$differenz_mean_to_meanmean_quadrat)
#SST
ANOVATable_Koerperlaenge_SSt_SSb <- ANOVATable_Koerperlaenge_SSw %>% mutate(mean_mean_Koerperlaenge = mean_mean_flugdauer_Koerperlaenge, differenz_mean_mean = Flugdauer - mean_mean_Koerperlaenge, differenz_mean_mean_quadrat =differenz_mean_mean**2)
SSt_Koerperlaenge <- sum(ANOVATable_Koerperlaenge_SSt_SSb$differenz_mean_mean_quadrat)
#Mean Square
#MSb
MSb_Koerperlaenge <- SSb_Koerperlaenge/dfb
#MSw
MSw_Koerperlaenge <- SSw_Koerperlaenge/dfw
#F value
F_wert_Koerperlaenge <- MSb_Koerperlaenge/MSw_Koerperlaenge
#Decision mit Irrtumwahrscheinlihckeit 5%
if (F_wert_Koerperlaenge<qf95) {
"H0 Koerperlaenge wird nicht verworfen"
} else "H0 Koerperlaenge wird verworfen"
#Multi-Var Graph
#code
multi_var_Koerperlaenge <- ggplot(data = data.frame(u = c(-10,15)),
mapping = aes(x = u)) +
stat_function(mapping = aes(colour = "Faktorstufe 1"),
fun = dnorm,
args = list(mean = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[1],
sd = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[1])) +
stat_function(mapping = aes(colour = "Faktorstufe 2"),
fun = dnorm,
args = list(mean = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[2],
sd = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[2])) +
geom_vline(aes(xintercept = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[1], col = "mean Faktorstufe 1")) +
geom_vline(aes(xintercept = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[2], col = "mean Faktorstufe 2")) +
scale_colour_manual(values = c("red", "blue","purple", "turquoise")) +
labs(x = "values",
y = "densities",
title = "ANOVA Koerperlaenge")
#display
multi_var_Koerperlaenge
#F Distribution ANOVA for all 3
F_verteilung <- ggplot(data = data.frame(u = c(0,10)),
mapping = aes(x = u)) +
stat_function(mapping = aes(colour = "Fdistribution"),
fun = df,
args = list(df1 = dfb,
df2 = dfw)) +
geom_vline(aes(xintercept = F_wert_Fluegellaenge, col = "FWert Flügellänge")) +
geom_vline(aes(xintercept = F_wert_Papierdichte, col = "FWert Papierdichte")) +
geom_vline(aes(xintercept = F_wert_Koerperlaenge, col = "FWert Körperlänge")) +
geom_vline(aes(xintercept = qf95, col = "Ablehnkriterium")) +
scale_colour_manual(values = c("red", "blue","purple", "turquoise", "green")) +
labs(x = "values",
y = "densities",
title = "F Distribution")
#displaying
F_verteilung
#Univariate Einfaktorielle Varianzanalyse ANOVA
ANOVATable <- read_excel("Messung.xlsx", sheet=4)
#Initialization Faktor
#Anzahl
Anzahl_Test <- 5 #per Faktorstufen
Anzahl_Test_Faktor <- 10 #per Faktor
Anzahl_Group <- 2
#Degree of Freedom
#dfb
dfb <- Anzahl_Group-1
#dfw
dfw <- Anzahl_Test_Faktor-Anzahl_Group
#dft
dft <- dfb + dfw
#Ablehnkriterium
qf95 <- qf(0.95, dfb, dfw) #gültig für alle da für alle gilt die anzahl der gruppen 2
#for 1. Faktor Fluegellaenge
#Calculation
#SSW
ANOVATable_Fluegellaenge_SSw <-  ANOVATable %>% slice(1:10) %>% group_by(faktorstufen) %>% mutate(mean_flugdauer = mean(Flugdauer)) %>% mutate(differenz_mean = Flugdauer - mean_flugdauer, differenz_mean_quadrat = differenz_mean**2)
SSw_Fluegellaenge <- sum(ANOVATable_Fluegellaenge_SSw$differenz_mean_quadrat)
#SSB
ANOVATable_Fluegellaenge_SSb <- ANOVATable_Fluegellaenge_SSw %>% summarise(mean_flugdauer = mean(Flugdauer), sd_flugdauer =  (var(Flugdauer)*((n()-1)/n())**(1/2)))
mean_mean_flugdauer_fluegellaenge <- mean(ANOVATable_Fluegellaenge_SSb$mean_flugdauer)
ANOVATable_Fluegellaenge_SSb <- ANOVATable_Fluegellaenge_SSb %>% mutate(mean_mean_flugdauer = mean_mean_flugdauer_fluegellaenge, differenz_mean_to_meanmean = mean_flugdauer - mean_mean_flugdauer, differenz_mean_to_meanmean_quadrat = differenz_mean_to_meanmean**2)
SSb_Fluegellaenge <- Anzahl_Test*sum(ANOVATable_Fluegellaenge_SSb$differenz_mean_to_meanmean_quadrat)
#SST
ANOVATable_Fluegellaenge_SSt_SSb <- ANOVATable_Fluegellaenge_SSw %>% mutate(mean_mean_fluegellaenge = mean_mean_flugdauer_fluegellaenge, differenz_mean_mean = Flugdauer - mean_mean_fluegellaenge, differenz_mean_mean_quadrat =differenz_mean_mean**2)
SSt_Fluegellaenge <- sum(ANOVATable_Fluegellaenge_SSt_SSb$differenz_mean_mean_quadrat)
#Mean Square
#MSb
MSb_Fluegellaenge <- SSb_Fluegellaenge/dfb
#MSw
MSw_Fluegellaenge <- SSw_Fluegellaenge/dfw
#F value
F_wert_Fluegellaenge <- MSb_Fluegellaenge/MSw_Fluegellaenge
#Decision mit Irrtumwahrscheinlihckeit 5%
if (F_wert_Fluegellaenge<qf95) {
"H0 Fluegellange wird nicht verworfen"
} else "H0 Fluegellange wird verworfen"
#Multi-Var Graph
#code
multi_var_fluegellaenge <- ggplot(data = data.frame(u = c(-10,15)),
mapping = aes(x = u)) +
stat_function(mapping = aes(colour = "Faktorstufe 1"),
fun = dnorm,
args = list(mean = ANOVATable_Fluegellaenge_SSb$mean_flugdauer[1],
sd = ANOVATable_Fluegellaenge_SSb$mean_flugdauer[1])) +
stat_function(mapping = aes(colour = "Faktorstufe 2"),
fun = dnorm,
args = list(mean = ANOVATable_Fluegellaenge_SSb$mean_flugdauer[2],
sd = ANOVATable_Fluegellaenge_SSb$mean_flugdauer[2])) +
geom_vline(aes(xintercept = ANOVATable_Fluegellaenge_SSb$mean_flugdauer[1], col = "mean Faktorstufe 1")) +
geom_vline(aes(xintercept = ANOVATable_Fluegellaenge_SSb$mean_flugdauer[2], col = "mean Faktorstufe 2")) +
scale_colour_manual(values = c("red", "blue","purple", "turquoise")) +
labs(x = "values",
y = "densities",
title = "ANOVA Flügellänge")
#display
multi_var_fluegellaenge
#for 2. Faktor Papierdichte
#Calculation
#SSW
ANOVATable_Papierdichte_SSw <-  ANOVATable %>% slice(11:20) %>% group_by(faktorstufen) %>% mutate(mean_flugdauer = mean(Flugdauer)) %>% mutate(differenz_mean = Flugdauer - mean_flugdauer, differenz_mean_quadrat = differenz_mean**2)
SSw_Papierdichte <- sum(ANOVATable_Papierdichte_SSw$differenz_mean_quadrat)
#SSB
ANOVATable_Papierdichte_SSb <- ANOVATable_Papierdichte_SSw %>% summarise(mean_flugdauer = mean(Flugdauer), sd_flugdauer =  (var(Flugdauer)*((n()-1)/n())**(1/2)))
mean_mean_flugdauer_Papierdichte <- mean(ANOVATable_Papierdichte_SSb$mean_flugdauer)
ANOVATable_Papierdichte_SSb <- ANOVATable_Papierdichte_SSb %>% mutate(mean_mean_flugdauer = mean_mean_flugdauer_Papierdichte, differenz_mean_to_meanmean = mean_flugdauer - mean_mean_flugdauer, differenz_mean_to_meanmean_quadrat = differenz_mean_to_meanmean**2)
SSb_Papierdichte <- Anzahl_Test*sum(ANOVATable_Papierdichte_SSb$differenz_mean_to_meanmean_quadrat)
#SST
ANOVATable_Papierdichte_SSt_SSb <- ANOVATable_Papierdichte_SSw %>% mutate(mean_mean_Papierdichte = mean_mean_flugdauer_Papierdichte, differenz_mean_mean = Flugdauer - mean_mean_Papierdichte, differenz_mean_mean_quadrat =differenz_mean_mean**2)
SSt_Papierdichte <- sum(ANOVATable_Papierdichte_SSt_SSb$differenz_mean_mean_quadrat)
#Mean Square
#MSb
MSb_Papierdichte <- SSb_Papierdichte/dfb
#MSw
MSw_Papierdichte <- SSw_Papierdichte/dfw
#F value
F_wert_Papierdichte <- MSb_Papierdichte/MSw_Papierdichte
#Decision mit Irrtumwahrscheinlihckeit 5%
if (F_wert_Papierdichte<qf95) {
"H0 Papierdichte wird nicht verworfen"
} else "H0 Papierdichte wird verworfen"
#Multi-Var Graph
#code
multi_var_Papierdichte <- ggplot(data = data.frame(u = c(-10,15)),
mapping = aes(x = u)) +
stat_function(mapping = aes(colour = "Faktorstufe 1"),
fun = dnorm,
args = list(mean = ANOVATable_Papierdichte_SSb$mean_flugdauer[1],
sd = ANOVATable_Papierdichte_SSb$mean_flugdauer[1])) +
stat_function(mapping = aes(colour = "Faktorstufe 2"),
fun = dnorm,
args = list(mean = ANOVATable_Papierdichte_SSb$mean_flugdauer[2],
sd = ANOVATable_Papierdichte_SSb$mean_flugdauer[2])) +
geom_vline(aes(xintercept = ANOVATable_Papierdichte_SSb$mean_flugdauer[1], col = "mean Faktorstufe 1")) +
geom_vline(aes(xintercept = ANOVATable_Papierdichte_SSb$mean_flugdauer[2], col = "mean Faktorstufe 2")) +
scale_colour_manual(values = c("red", "blue","red", "blue")) +
labs(x = "values",
y = "densities",
title = "ANOVA Papierdichte")
#display
multi_var_Papierdichte
#for .3 Faktor
#Calculation
#SSW
ANOVATable_Koerperlaenge_SSw <-  ANOVATable %>% slice(21:30) %>% group_by(faktorstufen) %>% mutate(mean_flugdauer = mean(Flugdauer)) %>% mutate(differenz_mean = Flugdauer - mean_flugdauer, differenz_mean_quadrat = differenz_mean**2)
SSw_Koerperlaenge <- sum(ANOVATable_Koerperlaenge_SSw$differenz_mean_quadrat)
#SSB
ANOVATable_Koerperlaenge_SSb <- ANOVATable_Koerperlaenge_SSw %>% summarise(mean_flugdauer = mean(Flugdauer), sd_flugdauer =  (var(Flugdauer)*((n()-1)/n())**(1/2)))
mean_mean_flugdauer_Koerperlaenge <- mean(ANOVATable_Koerperlaenge_SSb$mean_flugdauer)
ANOVATable_Koerperlaenge_SSb <- ANOVATable_Koerperlaenge_SSb %>% mutate(mean_mean_flugdauer = mean_mean_flugdauer_Koerperlaenge, differenz_mean_to_meanmean = mean_flugdauer - mean_mean_flugdauer, differenz_mean_to_meanmean_quadrat = differenz_mean_to_meanmean**2)
SSb_Koerperlaenge <- Anzahl_Test*sum(ANOVATable_Koerperlaenge_SSb$differenz_mean_to_meanmean_quadrat)
#SST
ANOVATable_Koerperlaenge_SSt_SSb <- ANOVATable_Koerperlaenge_SSw %>% mutate(mean_mean_Koerperlaenge = mean_mean_flugdauer_Koerperlaenge, differenz_mean_mean = Flugdauer - mean_mean_Koerperlaenge, differenz_mean_mean_quadrat =differenz_mean_mean**2)
SSt_Koerperlaenge <- sum(ANOVATable_Koerperlaenge_SSt_SSb$differenz_mean_mean_quadrat)
#Mean Square
#MSb
MSb_Koerperlaenge <- SSb_Koerperlaenge/dfb
#MSw
MSw_Koerperlaenge <- SSw_Koerperlaenge/dfw
#F value
F_wert_Koerperlaenge <- MSb_Koerperlaenge/MSw_Koerperlaenge
#Decision mit Irrtumwahrscheinlihckeit 5%
if (F_wert_Koerperlaenge<qf95) {
"H0 Koerperlaenge wird nicht verworfen"
} else "H0 Koerperlaenge wird verworfen"
#Multi-Var Graph
#code
multi_var_Koerperlaenge <- ggplot(data = data.frame(u = c(-10,15)),
mapping = aes(x = u)) +
stat_function(mapping = aes(colour = "Faktorstufe 1"),
fun = dnorm,
args = list(mean = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[1],
sd = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[1])) +
stat_function(mapping = aes(colour = "Faktorstufe 2"),
fun = dnorm,
args = list(mean = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[2],
sd = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[2])) +
geom_vline(aes(xintercept = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[1], col = "mean Faktorstufe 1")) +
geom_vline(aes(xintercept = ANOVATable_Koerperlaenge_SSb$mean_flugdauer[2], col = "mean Faktorstufe 2")) +
scale_colour_manual(values = c("red", "blue","purple", "turquoise")) +
labs(x = "values",
y = "densities",
title = "ANOVA Koerperlaenge")
#display
multi_var_Koerperlaenge
#F Distribution ANOVA for all 3
F_verteilung <- ggplot(data = data.frame(u = c(0,10)),
mapping = aes(x = u)) +
stat_function(mapping = aes(colour = "Fdistribution"),
fun = df,
args = list(df1 = dfb,
df2 = dfw)) +
geom_vline(aes(xintercept = F_wert_Fluegellaenge, col = "FWert Flügellänge")) +
geom_vline(aes(xintercept = F_wert_Papierdichte, col = "FWert Papierdichte")) +
geom_vline(aes(xintercept = F_wert_Koerperlaenge, col = "FWert Körperlänge")) +
geom_vline(aes(xintercept = qf95, col = "Ablehnkriterium")) +
scale_colour_manual(values = c("red", "blue","purple", "turquoise", "green")) +
labs(x = "values",
y = "densities",
title = "F Distribution")
#displaying
F_verteilung
versuchsplan <- read_excel("Messung.xlsx", sheet=5)
#creating facdesign object
vp <- facDesign(
k =3,
replicates = 5,
centerCube = 0
)
#Parameters for DoE
names(vp) <- c("Fluegellaenge", "Papierdichte", "Koerperlaenge")
lows(vp) <- c(60,80,40)
highs(vp) <- c(80, 120, 60)
units(vp) <- c("mm", "mm", "g/mm^2")
#changing data types and sorting
vp_in_df <- as.data.frame(vp)
vp_in_tibble <- as_tibble(vp_in_df)
vp_sortiert_flugdauer <- vp_in_tibble %>%
arrange(C) %>%
arrange(B) %>%
arrange(A)
#arranging the excel data
vp_input_flugdauer <- versuchsplan %>%
arrange(Koerperlaenge) %>%
arrange(Papierstaerke) %>%
arrange(Fluegellaenge)
#merging vp with excel data (improrting flugdauer)
vp_sortiert_flugdauer <- vp_sortiert_flugdauer %>%
mutate(Flugdauer = vp_input_flugdauer$Flugdauer) %>%
arrange(RunOrder)
#idk what this does tbh
Flugdauer <- vp_sortiert_flugdauer$Flugdauer
response(vp)<- Flugdauer
#Displaying
vp
#methode umwandlung ke dataframe dengan function terus dimasukin ke group
##ini methode di übung DQE
fdo_to_df <- function(fdo) {
if (nrow(fdo@centerCube) == 0) {
fdo_df <- data.frame(fdo@cube, response = fdo@response[[1]][1:(nrow(fdo@cube))])
} else {
fdo_cube <- data.frame(fdo@cube, response = fdo@response[[1]][1:(nrow(fdo@cube))], group = 1)
fdo_center <- data.frame(fdo@centerCube, response = fdo@response[[1]][(nrow(fdo@cube) + 1):nrow(fdo@response)], group = 0)
fdo_df <- bind_rows(fdo_cube, fdo_center)
}
return(fdo_df)
}
#ini dipake buat linear model (runoder ga vorhanden disini)
#Diese Daten werden für lineares Modell benötigt
vp_df <- fdo_to_df(vp)
#Hauptwirkung A Fluegellaenge
#calculation
hw_a <- vp_df %>%
group_by(A) %>%
summarise(mean  = mean(response))
hw_a
#creating plot and displaying
ggplot(data = hw_a, mapping = aes(x = A, y = mean)) +
geom_point(col = "red") +
geom_line() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
panel.border = element_blank()) +
labs(x = "A: Flügellänge", y = "Flugdauer", title = "Effekt-Plot")
#Hauptwirkung B Papierdichte
#calculation
hw_b <- vp_df %>%
group_by(B) %>%
summarise(mean  = mean(response))
hw_b
#creating plot and displaying
ggplot(data = hw_b, mapping = aes(x = B, y = mean)) +
geom_point(col = "red") +
geom_line() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
panel.border = element_blank()) +
labs(x = "B = Papierdichte", y = "Flugdauer", title = "Effekt-Plot")
#Hauptwirkung C Koerperlaenge
#calculation
hw_c <- vp_df %>%
group_by(C) %>%
summarise(mean  = mean(response))
hw_c
#creating and displaying plot
ggplot(data = hw_c, mapping = aes(x = C, y = mean)) +
geom_point(col = "red") +
geom_line() +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
panel.border = element_blank()) +
labs(x = "C = Körperlänge", y = "Flugdauer", title = "Effekt-Plot")
#Wechselwirkung
vp_wechselwirkung <- vp_df %>% mutate(AB = A*B, AC = A*C, BC = B*C, ABC = A*B*C)
vp_WW_AB <- vp_wechselwirkung %>% group_by(AB) %>%  summarize(mean_response = mean(response))
vp_WW_AC <- vp_wechselwirkung %>% group_by(BC) %>%  summarize(mean_response = mean(response))
vp_WW_BC <- vp_wechselwirkung %>% group_by(AC) %>%  summarize(mean_response = mean(response))
vp_WW_ABC <- vp_wechselwirkung %>% group_by(ABC) %>%  summarize(mean_response = mean(response))
# A und B
ll <- (filter(vp_df, A == -1, B == -1) %>% summarise(mean = mean(response)))$mean
lh <- (filter(vp_df, A == -1, B ==  1) %>% summarise(mean = mean(response)))$mean
hl <- (filter(vp_df, A ==  1, B == -1) %>% summarise(mean = mean(response)))$mean
hh <- (filter(vp_df, A ==  1, B ==  1) %>% summarise(mean = mean(response)))$mean
df <- data.frame(y = c(ll, lh, hl, hh), x = c(-1, -1, 1, 1), col = c(-1, 1, -1, 1))
ggplot(data = df, mapping = aes(x = x, y = y)) +
geom_point(col = "red") +
geom_line(mapping = aes(x = x, y = y, col = factor(col))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
panel.border = element_blank()) +
labs(x = "A: Flügellänge", y = "Flugdauer", col = "B: Papierdichte", title = "Interaktions-Plot")
#B und C
ll <- (filter(vp_df, B == -1, C == -1) %>% summarise(mean = mean(response)))$mean
lh <- (filter(vp_df, B == -1, C ==  1) %>% summarise(mean = mean(response)))$mean
hl <- (filter(vp_df, B ==  1, C == -1) %>% summarise(mean = mean(response)))$mean
hh <- (filter(vp_df, B ==  1, C ==  1) %>% summarise(mean = mean(response)))$mean
df <- data.frame(y = c(ll, lh, hl, hh), x = c(-1, -1, 1, 1), col = c(-1, 1, -1, 1))
ggplot(data = df, mapping = aes(x = x, y = y)) +
geom_point(col = "red") +
geom_line(mapping = aes(x = x, y = y, col = factor(col))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
panel.border = element_blank()) +
labs(x = "B: Papierdichte", y = "Flugdauer", col = "C : Körperlänge", title = "Interaktions-Plot")
# A und C
ll <- (filter(vp_df, A == -1, C == -1) %>% summarise(mean = mean(response)))$mean
lh <- (filter(vp_df, A == -1, C ==  1) %>% summarise(mean = mean(response)))$mean
hl <- (filter(vp_df, A ==  1, C == -1) %>% summarise(mean = mean(response)))$mean
hh <- (filter(vp_df, A ==  1, C ==  1) %>% summarise(mean = mean(response)))$mean
df <- data.frame(y = c(ll, lh, hl, hh), x = c(-1, -1, 1, 1), col = c(-1, 1, -1, 1))
ggplot(data = df, mapping = aes(x = x, y = y)) +
geom_point(col = "red") +
geom_line(mapping = aes(x = x, y = y, col = factor(col))) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
panel.border = element_blank()) +
labs(x = "A: Flügellänge", y = "Flugdauer", col = "C : Körperlänge", title = "Interaktions-Plot")
#A B C wird keine Tabelle, da die Wechselwirkung nicht graphisch darstellebar ist.
#Zusammenfassung
Wirkungtabelle <- hw_a %>% rename(hw_a = mean) %>%  mutate(hw_b = hw_b$mean,hw_c = hw_c$mean, ww_ab = vp_WW_AB$mean_response, ww_ac = vp_WW_AC$mean_response , ww_bc = vp_WW_BC$mean_response, ww_abc = vp_WW_ABC$mean_response)
#Results
Wirkungtabelle_result <- Wirkungtabelle[2,] - Wirkungtabelle[1,]
#linear regression
lm_komplett <- lm(response ~ A * B * C , data = vp_df)
summary(lm_komplett)
#lm signifikant
View(Wirkungtabelle)
View(Wirkungtabelle_result)
#Importing MSA1 Table
MSA1 <- read_excel("Messung.xlsx", sheet=1)
#summarizing Flugdauer Table
MSA1_Flugdauer_summarized <- MSA1 %>% summarize(mean_flugdauer = mean(Flugdauer), var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2)) %>% mutate(dreisd_flugdauer = sd_flugdauer*3, sechssd_flugdauer = sd_flugdauer*6)
#Toleranz for Cg, Cgo, Cgu Calculation
Flugdauer_Toleranz_matrix <- c(LSL_Flugdauer,USL_Flugdauer) #UTG und OTG sekunde (Messmittel sollte bei gleicher Messproben (improved Copter) einen Toleranz unter 20% sein?)
Flugdauer_Toleranz_value <- Flugdauer_Toleranz_matrix[2]-Flugdauer_Toleranz_matrix[1]
Flugdauer_Toleranz_matrix_normalcopter <-  c(Flugdauer_Wahrerwert - Flugdauer_Toleranz_value/2, Flugdauer_Wahrerwert + Flugdauer_Toleranz_value/2)
#Creating Run Chart
cgRunChart(MSA1$Flugdauer, target = Flugdauer_Wahrerwert, tolerance = Flugdauer_Toleranz_matrix_normalcopter, n=0.2, ref.interval=pnorm(3)-pnorm(-3),cgOut = FALSE )
#Calculating Cg, Cgk
Cg <- (0.2*Flugdauer_Toleranz_value)/(6*MSA1_Flugdauer_summarized$sd_flugdauer)
Cgku <- (Flugdauer_Wahrerwert + 0.1*Flugdauer_Toleranz_value - MSA1_Flugdauer_summarized$mean_flugdauer)/(3*MSA1_Flugdauer_summarized$sd_flugdauer)
Cgko <- (MSA1_Flugdauer_summarized$mean_flugdauer + 0.1*Flugdauer_Toleranz_value - Flugdauer_Wahrerwert)/(3*MSA1_Flugdauer_summarized$sd_flugdauer)
Cgk <- min(Cgku,Cgko)
View(MSA1_Flugdauer_summarized)
View(MSA1_Flugdauer_summarized)
#Creating tables of relevant informations
MSA2_Flugdauer_Wiederholung_summarized <- MSA2 %>% group_by(Pruefer) %>% summarize(mean_Wiederholung_1 = mean(Wiederholung_1), mean_Wiederholung_2 = mean(Wiederholung_2), mean_Wiederholung_3 = mean(Wiederholung_3))
MSA2_Flugdauer_Teil_mutated <- MSA2 %>% rowwise() %>% mutate(mean_teil = mean(c(Wiederholung_1, Wiederholung_2, Wiederholung_3)), min_teil = min(c(Wiederholung_1, Wiederholung_2, Wiederholung_3)), max_teil = max(c(Wiederholung_1, Wiederholung_2, Wiederholung_3)), spannweite = max_teil - min_teil) %>% ungroup()
MSA2_Flugdauer_Teil_summarized_perPruefer <- MSA2_Flugdauer_Teil_mutated %>% group_by(Pruefer) %>% summarize(mean_teil = mean(mean_teil), mean_spannweite = sum(spannweite)/Anzahl_Teile)
MSA2_Flugdauer_Teil_summarized_gesamt <- MSA2_Flugdauer_Teil_mutated %>% group_by(Teil) %>% summarize(mean_teil = mean(mean_teil))
Spannweite_gesamt <- max(MSA2_Flugdauer_Teil_summarized_gesamt$mean_teil) - min(MSA2_Flugdauer_Teil_summarized_gesamt$mean_teil)
mean_mean_spannweite <- mean(MSA2_Flugdauer_Teil_summarized_perPruefer$mean_spannweite)
mittelwert_differenz <- max(MSA2_Flugdauer_Teil_summarized_perPruefer$mean_teil) - min(MSA2_Flugdauer_Teil_summarized_perPruefer$mean_teil)
#Calculation of Values
#Calculation Wiederholpräzision (Equipment Variation)
EV <- mean_mean_spannweite*K1
#Calculation Vergleichspräzision (Appraiser Variation)
AV <- ((mittelwert_differenz*K2)**(2)-(((EV)**2)/(Anzahl_Teile*Anzahl_Wiederholungen)))**(1/2)
#Calculatiion Wiederholbarkeit und Vergleichbarkeit (Gage Repeatability and Reproducibility)
GRR <- (((EV)**2+(AV)**2))**(1/2)
#Calculation Streuung von Teil zu Teil (Part Variation)
PV <- Spannweite_gesamt*K3
#calculation Gesamtstreuung (Total Variation)
TV <- (((GRR)**2+(PV)**2))**(1/2)
#Calculation of percentual value
names <- c("EV","AV","GRR","PV","TV")
MSAvalues <- c(EV,AV,GRR,PV,TV)
MSA2Table <- as_tibble(names) %>% rename(names = value) %>% bind_cols(as_tibble(MSAvalues)) %>% mutate(Streuung_prozessbezogen = value/TV, Streuung_toleranzbezogen = value/(Flugdauer_Toleranz_value/6))
#Check if GRR Prozessbezogen
if (MSA2Table$Streuung_prozessbezogen[3]>0.3) {
MSA2_Statement_Prozessbezogen <- "Messprozess nicht geeignet"
} else {
if (MSA2Table$Streuung_prozessbezogen[3]<0.1) {
MSA2_Statement_Prozessbezogen <- "Messprozess geeignet"
} else MSA2_Statement_Prozessbezogen <- "Messprozess bedingt geeignet" }
#Check if GRR Toleranzbezogen
if (MSA2Table$Streuung_toleranzbezogen[3]>0.3) {
MSA2_Statement_toleranzbezogen <- "Messprozess nicht geeignet"
} else {
if (MSA2Table$Streuung_toleranzbezogen[3]<0.1) {
MSA2_Statement_toleranzbezogen <- "Messprozess geeignet"
} else MSA2_Statement_toleranzbezogen <- "Messprozess bedingt geeignet" }
cgHist(MSA1$Flugdauer, target = Flugdauer_Wahrerwert, tolerance = Flugdauer_Toleranz_matrix_normalcopter, n=0.2, ref.interval=pnorm(3)-pnorm(-3),cgOut = FALSE )
View(MSA2Table)
View(MSA2Table)
View(MSA2_Flugdauer_Teil_mutated)
View(MSA2_Flugdauer_Teil_mutated)
View(MSA2_Flugdauer_Teil_summarized_gesamt)
View(MSA2_Flugdauer_Teil_summarized_perPruefer)
View(MSA2_Flugdauer_Wiederholung_summarized)
#reading excel
normalcoptertable <- read_excel("Messung.xlsx", sheet=3)
#parameter based on test
number_of_observations <- count(normalcoptertable)
#preprocessing , finding statistical parameter values
normalcoptertable_summarized <-  normalcoptertable %>% summarize(mean_flugdauer = mean(Flugdauer),var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2))
#creating histogram
histogram_normalcopter<-  ggplot(data = normalcoptertable, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = 50) + #nclass.Sturges(normalcoptertable$Flugdauer)
geom_vline(aes(xintercept = Flugdauer_Toleranz_matrix_normalcopter[1], col = "LSL")) +
geom_vline(aes(xintercept = Flugdauer_Toleranz_matrix_normalcopter[2], col = "USL")) +
theme_bw() +  labs(title = "Flugdauer Histogram") +
scale_color_manual(name = "Lines", values = c(LSL = "blue", USL = "red"))
#creating qqplot
qqplot_normalcopter <- ggplot(mapping = aes(sample = normalcoptertable$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Flugdauer QQPlot")
#Creating Box-Plot-Diagram
boxplot_data <- boxplot.stats(normalcoptertable$Flugdauer)
boxplot_normalcopter <- ggplot(normalcoptertable, aes( y=Flugdauer)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar') +
geom_hline(aes(yintercept = Flugdauer_Toleranz_matrix_normalcopter[1], col = "LSL")) +
geom_hline(aes(yintercept = Flugdauer_Toleranz_matrix_normalcopter[2], col = "USL")) +
scale_color_manual(name = "Lines", values = c(LSL = "blue", USL = "red")) +
theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank()) +
labs(title = "Flugdauer Histogram") + coord_flip()
#Creating Run Chart
cgRunChart(normalcoptertable$Flugdauer, target = Flugdauer_Wahrerwert, tolerance = Flugdauer_Toleranz_matrix_normalcopter, n=1, ref.interval=pnorm(3)-pnorm(-3),cgOut = FALSE )
#displaying the plots
histogram_normalcopter
qqplot_normalcopter
boxplot_normalcopter
#reading excel
normalcoptertable <- read_excel("Messung.xlsx", sheet=3)
#parameter based on test
number_of_observations <- count(normalcoptertable)
#preprocessing , finding statistical parameter values
normalcoptertable_summarized <-  normalcoptertable %>% summarize(mean_flugdauer = mean(Flugdauer),var_flugdauer = var(Flugdauer)*((n()-1)/n()), sd_flugdauer = (var_flugdauer)**(1/2))
#creating histogram
histogram_normalcopter<-  ggplot(data = normalcoptertable, mapping = aes(x = Flugdauer)) +
geom_histogram(bins = 50) + #nclass.Sturges(normalcoptertable$Flugdauer)
geom_vline(aes(xintercept = Flugdauer_Toleranz_matrix_normalcopter[1], col = "LSL")) +
geom_vline(aes(xintercept = Flugdauer_Toleranz_matrix_normalcopter[2], col = "USL")) +
theme_bw() +  labs(title = "Flugdauer Histogram") +
scale_color_manual(name = "Lines", values = c(LSL = "blue", USL = "red"))
#creating qqplot
qqplot_normalcopter <- ggplot(mapping = aes(sample = normalcoptertable$Flugdauer)) +
geom_qq() +
geom_qq_line() +
xlab("Theoritical Quantiles") +
ylab("Sample Quantiles") +
ggtitle("Normal Q-Q Plot") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title = "Flugdauer QQPlot")
#Creating Box-Plot-Diagram
boxplot_data <- boxplot.stats(normalcoptertable$Flugdauer)
boxplot_normalcopter <- ggplot(normalcoptertable, aes( y=Flugdauer)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar') +
geom_hline(aes(yintercept = Flugdauer_Toleranz_matrix_normalcopter[1], col = "LSL")) +
geom_hline(aes(yintercept = Flugdauer_Toleranz_matrix_normalcopter[2], col = "USL")) +
scale_color_manual(name = "Lines", values = c(LSL = "blue", USL = "red")) +
theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank()) +
labs(title = "Flugdauer Boxplot") + coord_flip()
#Creating Run Chart
cgRunChart(normalcoptertable$Flugdauer, target = Flugdauer_Wahrerwert, tolerance = Flugdauer_Toleranz_matrix_normalcopter, n=1, ref.interval=pnorm(3)-pnorm(-3),cgOut = FALSE )
#displaying the plots
histogram_normalcopter
qqplot_normalcopter
boxplot_normalcopter
View(boxplot_data)
View(boxplot_data)
View(normalcoptertable_summarized)
Flugdauer_Toleranz_matrix_normalcopter
ADTest
